{"version":3,"sources":["redux/actions/usersAction.js","redux/reducers/usersReducer.js","redux/store.js","config/constants.js","helpers/userSessionInfo.js","components/Header/Header.js","components/MessageArea/MessageList/MessageList.js","components/MessageArea/NewMessage/NewMessage.js","components/MessageArea/MessageArea.js","components/MessageArea/WelcomeMessage/WelcomeMessage.js","components/CounterMessages/CounterMessages.js","components/RoomList/RoomList.js","components/UserMenu/UserMenu.js","components/UserList/UserList.js","components/LeftSide/LeftSide.js","helpers/sockets.js","components/Main/Main.js","components/Login/Login.js","components/Register/Register.js","components/InviteUser/InviteUser.js","PrivateRoute.js","App.js","index.js"],"names":["types","setCurrentUser","userLogged","type","payload","addNewRoom","addNewMessage","initialState","isAuth","user","users","chatRoom","chatRooms","messages","devtoools","window","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","state","userTypes","chatroom","find","_id","count","filter","p","chat","constants","https","JWTSecret","numeroSalt","IP_Server","client","newMessageSound","addUserSession","token","localStorage","setItem","axios","defaults","headers","common","removeUserSession","removeItem","getJwt","getItem","Header","props","className","chatRoom_name","onClick","logOut","moment","format","MessageList","map","msg","key","src","user_id","avatar","alt","firstname","lastname","username","date","fromNow","message","NewMessage","maxLength","placeholder","onKeyPress","e","shiftKey","target","value","readOnly","setReadonly","MessageArea","scrollToBottom","boxRef","current","scrollTop","scrollHeight","componentDidUpdate","React","createRef","ref","this","WithchatRooms","Component","style","width","height","opacity","CounterMessages","RoomList","setChatRoom","sala","index","chatRoomId","setCurrentChatRoom","id","name","undefined","UserMenu","editUsername","editPassword","UserList","inviteUser","u","LeftSide","currentChatRoom","that","get","api","then","res","setUsers","data","setMessages","resetCountNewMessages","catch","err","toast","error","response","alertify","prompt","evt","patch","resp","editCurrentUser","success","set","password","newChatRoom","post","redireccionar","history","push","confirm","setting","onok","link","navigator","clipboard","writeText","setHeader","ok","cancel","show","tittle","Helmet","reduce","c","content","mapDispatchToProps","connect","socket","initSocket","newMessageAudio","Audio","newState","getState","io","on","console","log","x","emit","chatroom_id","dispatch","receivedMessage","play","Main","sendMessage","connected","WelcomeMessage","length","autoClose","Login","addUserTochatRoom","userid","match","params","roomid","handleChange","event","setState","handleSubmit","preventDefault","other","iduser","to","onSubmit","htmlFor","autoFocus","onChange","required","Register","InviteUser","isLoading","userAdded","decoded","jwt_decode","margin","component","rest","render","App","exact","path","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.17b6535b.chunk.js","sourcesContent":["export const types = {\r\n  set: \"SET_CURRENT_USER\",\r\n  edit: \"EDIT_CURRENT_USER\",\r\n  setUsers: \"SET_USERS\",\r\n  addNewRoom: \"ADD_CHATROOM\",\r\n  setChatRoom: \"SET_CURRENT_CHATROOM\",\r\n  setMessages: \"SET_MESSAGES\",\r\n  reset: \"RESET_STORE\",\r\n  addNewMessage: \"ADD_NEW_MESSAGE\",\r\n  setUserToken: \"SET_USER_TOKEN\",\r\n  setCountNewMessages: \"SET_COUNT_NEW_MESSAGES\",\r\n  resetCountNewMessages: \"RESET_COUNT_NEW_MESSAGES\"\r\n};\r\n\r\n// Asigna el current User\r\nexport const setCurrentUser = userLogged => ({\r\n  type: types.set,\r\n  payload: userLogged,\r\n});\r\n\r\n// Asigna el token User\r\nexport const setUserToken = payload => ({\r\n  type: types.setUserToken,\r\n  payload,\r\n});\r\n\r\n// Editar el current User\r\nexport const editCurrentUser = payload => ({\r\n  type: types.edit,\r\n  payload,\r\n});\r\n\r\n// Asigna Usuarios de sala Seleccionada\r\nexport const setUsers = users => ({\r\n  type: types.setUsers,\r\n  payload: users,\r\n});\r\n\r\n// Asigna nueva sala\r\nexport const addNewRoom = payload => ({\r\n  type: types.addNewRoom,\r\n  payload,\r\n});\r\n\r\n// Asigna current sala\r\nexport const setChatRoom = payload => ({\r\n  type: types.setChatRoom,\r\n  payload,\r\n});\r\n\r\n// Asigna mensajes de la sala seleccionada\r\nexport const setMessages = payload => ({\r\n  type: types.setMessages,\r\n  payload,\r\n});\r\n\r\n// Asigna nuevo mensaje\r\nexport const addNewMessage = payload => ({\r\n  type: types.addNewMessage,\r\n  payload,\r\n});\r\n\r\n// LogOut and reset store\r\nexport const logOut = () => ({\r\n  type: types.reset\r\n});\r\n\r\n\r\n// Actualiza contador de mensajes sin visualizar por chatroom\r\nexport const setCountNewMessages = payload => ({\r\n  type: types.setCountNewMessages,\r\n  payload,\r\n});\r\n\r\n// Resetea contador de mensajes sin visualizar por chatroom\r\nexport const resetCountNewMessages = payload => ({\r\n  type: types.resetCountNewMessages,\r\n  payload,\r\n})","import { types as userTypes } from \"../actions/usersAction\";\r\n\r\nconst initialState = {\r\n  isAuth: false,\r\n  user: {},\r\n  users: [],\r\n  chatRoom: {},\r\n  chatRooms: [],\r\n  messages: [],\r\n};\r\n\r\nexport default (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case userTypes.set:\r\n      return {\r\n        ...state,\r\n        isAuth: true,\r\n        user: payload.user,\r\n        chatRooms: payload.chatRooms,\r\n      };\r\n      case userTypes.edit:\r\n      return {\r\n        ...state,\r\n        user: payload,\r\n      };\r\n    case userTypes.setUsers:\r\n      return {\r\n        ...state,\r\n        users: payload,\r\n      };\r\n    case userTypes.reset:\r\n      return initialState;\r\n    case userTypes.addNewRoom:\r\n      return {\r\n        ...state,\r\n        chatRooms: [...state.chatRooms, payload],\r\n      };\r\n    case userTypes.setChatRoom:\r\n      return {\r\n        ...state,\r\n        chatRoom: payload,\r\n      };\r\n    case userTypes.setMessages:\r\n      return {\r\n        ...state,\r\n        messages: payload\r\n      }\r\n    case userTypes.addNewMessage:\r\n      return {\r\n        ...state,\r\n        messages: [...state.messages, payload],\r\n      }\r\n      case userTypes.setUserToken:\r\n        return {\r\n          ...state,\r\n          user: payload,\r\n          isAuth: true,\r\n        };\r\n      case userTypes.setCountNewMessages:\r\n        const chatroom = state.chatRooms.find(chatroom => chatroom._id === payload)\r\n        return {\r\n          ...state,\r\n          chatRooms: [\r\n            { ...chatroom, count: chatroom.count ? ++chatroom.count : 1},\r\n            ...state.chatRooms.filter(p => p!== chatroom), \r\n           ]\r\n        };\r\n        case userTypes.resetCountNewMessages:\r\n          const chat = state.chatRooms.find(chatroom => chatroom._id === payload)\r\n          delete chat.count; \r\n          return {\r\n            ...state,\r\n            chatRooms: [ \r\n              { ...chat}, \r\n              ...state.chatRooms.filter(p => p!== chat)]\r\n          }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { createStore } from \"redux\";\r\nimport reducer from \"./reducers/usersReducer\";\r\n\r\nconst devtoools = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\nconst store = createStore(reducer, devtoools);\r\n\r\nexport default store;\r\n","export const constants = {\r\n  // api: 'http://localhost:3001/api/',\r\n  https:'http://cryptic-harbor-61839.herokuapp.com/api/',\r\n  JWTSecret: 'asdfghjkl',\r\n  numeroSalt: 10,\r\n  //IP_Server: 'http://localhost:3001',\r\n  IP_Server: 'http://cryptic-harbor-61839.herokuapp.com/',\r\n  //client: 'http://localhost:3000/',\r\n  client: 'http://cryptic-harbor-61839.herokuapp.com/',\r\n  newMessageSound: \"/sound/piece-of-cake.mp3\"\r\n};\r\n","import axios from 'axios';\r\n\r\nexport const addUserSession = token => {\r\n    // Agrega token al localStorage\r\n    localStorage.setItem('chatRoomJWT', token);\r\n    // Agrega token al header de Axios\r\n    axios.defaults.headers.common['auth-token'] = token;\r\n}\r\n\r\nexport const removeUserSession = () => {\r\n    // Remueve token al localStorage\r\n    localStorage.removeItem('chatRoomJWT');\r\n    // Remueve token al header de Axios\r\n    delete axios.defaults.headers.common['auth-token'];\r\n}\r\n\r\nexport const getJwt = () => localStorage.getItem('chatRoomJWT');\r\n","import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nconst Header = props => (\r\n  <nav className=\"main-nav\">\r\n    <ul>\r\n      <li>{props.chatRoom_name}</li>\r\n    </ul>\r\n    <div>\r\n      <button onClick={props.logOut}>Log Out</button>\r\n    </div>\r\n  </nav>\r\n);\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport moment from \"moment\";\r\nimport { constants } from \"../../../config/constants\";\r\nmoment().format();\r\n\r\nconst MessageList = (props) => (\r\n  <div>\r\n    {props.messages.map((msg) => (\r\n      <div key={msg._id} className=\"FlexRow\">\r\n        <img\r\n          src={`${constants.IP_Server}/avatars/${msg.user_id.avatar}`}\r\n          alt=\"\"\r\n          className=\"photoMsg\"\r\n        />\r\n        <div className=\"row width100\">\r\n          <div className=\"col-xs\">\r\n            <small>\r\n              {`${msg.user_id.firstname} ${msg.user_id.lastname}`}\r\n            </small>\r\n            <i>\r\n              <small> \r\n                {` [${msg.user_id.username}] `} \r\n              </small>\r\n            </i>\r\n            <span className=\"date\"> \r\n              {`  ${moment(msg.date).fromNow()}`} \r\n            </span>\r\n          </div>\r\n          <span className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n            {msg.message}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    ))}\r\n  </div>\r\n);\r\n\r\nMessageList.propTypes = {\r\n  optionalArrayOf: PropTypes.arrayOf(PropTypes.object),\r\n};\r\n\r\nexport default MessageList;\r\n","import React from \"react\";\r\n\r\nconst NewMessage = (props) => {\r\n  const handleUserKeyPress = (e) => {\r\n    if (e.key === \"Enter\" && !e.shiftKey) {\r\n      props.onKeyPress(e.target.value);\r\n      e.target.value = \"\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <textarea\r\n      className=\"newMessage-container\"\r\n      type=\"text\"\r\n      maxLength=\"200\"\r\n      placeholder=\"Escribe un mensaje\"\r\n      onKeyPress={handleUserKeyPress}\r\n      readOnly={props.setReadonly}\r\n    />\r\n  );\r\n};\r\n\r\nexport default NewMessage;\r\n","import React, { Component } from \"react\";\r\nimport \"./MessageArea.css\";\r\nimport MessageList from \"./MessageList/MessageList\";\r\nimport NewMessage from \"./NewMessage/NewMessage\";\r\n\r\nclass MessageArea extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.boxRef = React.createRef();\r\n  }\r\n  scrollToBottom = () => {\r\n    this.boxRef.current.scrollTop = this.boxRef.current.scrollHeight;\r\n  };\r\n\r\n  componentDidUpdate = () => {\r\n    this.scrollToBottom();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"messagesArea-container\">\r\n        <div className=\"messages-container\" ref={this.boxRef}>\r\n          <MessageList\r\n            messages={this.props.messages}\r\n            WithchatRooms={this.props.WithchatRooms} />\r\n        </div>\r\n        <NewMessage onKeyPress={this.props.onKeyPress} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MessageArea;\r\n","import React from \"react\";\r\n\r\nexport default (props) => {\r\n  return (\r\n    <div className=\"welcomeMessage\">\r\n      <strong>\r\n        <h2>Welcome To ChatRoom App</h2>\r\n      </strong>\r\n      <br />\r\n      {props.WithchatRooms ? (\r\n        <h3>\r\n          You have to add a new ChatRoom \r\n          <br />\r\n          <br />\r\n          In order to start a chat, You need to add a new chatRoom, invite\r\n          people and then start to chat with them\r\n        </h3>\r\n      ) : (\r\n        <h3>\r\n          Select a ChatRoom \r\n          <br /> \r\n          <br />\r\n          Send and receive messages in a chatRoom, you can share it with all\r\n          user into the chatroom\r\n        </h3>\r\n      )}\r\n      <img\r\n        alt=\"logo\"\r\n        src=\"/img/human-chain.png\"\r\n        style={{ width: \"250px\", height: \"250px\", opacity: \"0.5\" }} />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./CounterMessages.css\";\r\n\r\nconst CounterMessages = props => (\r\n    <span className=\"div-msg-counter\"> {props.count> 99 ? `+${props.count}` : props.count} </span>\r\n);\r\n\r\nexport default CounterMessages;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./RoomList.css\";\r\nimport \"../CounterMessages/CounterMessages\";\r\nimport CounterMessages from \"../CounterMessages/CounterMessages\";\r\n\r\nconst RoomList = (props) => (\r\n  <div>\r\n    <div className=\"tittle\">\r\n      <span style={{ width: \"90%\" }}> ChatRooms </span>\r\n      <div className=\"tooltip\" style={{ width: \"10%\" }}>\r\n        <span className=\"tooltiptext\">new chatRoom</span>\r\n        <span className=\"linkHover\" onClick={props.setChatRoom}>+</span>\r\n      </div>\r\n    </div>\r\n\r\n    <ul className=\"navSalas\">\r\n      {props.chatRooms.map((sala, index) => (\r\n        <li\r\n          className={\r\n            props.chatRoomId === sala._id ? \"linkSelected\" : \"linkHover\"\r\n          }\r\n          key={index}\r\n          onClick={props.setCurrentChatRoom}\r\n          id={sala._id}\r\n        >\r\n          {sala.name}\r\n          <sup key={index}>\r\n            {\r\n              sala.count !== undefined &&\r\n                <CounterMessages count={sala.count} />\r\n            }\r\n          </sup>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  </div>\r\n);\r\n\r\nRoomList.propTypes = {\r\n  chatRooms: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default RoomList;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { constants } from \"../../config/constants\";\r\nimport \"./UserMenu.css\";\r\n\r\nconst UserMenu = (props) => (\r\n  <div>\r\n    <div className=\"datosUser\">\r\n      <img\r\n        src={`${constants.IP_Server}/avatars/${props.user.avatar}`}\r\n        alt=\"\"\r\n        className=\"photo\"\r\n      />\r\n      <span>\r\n        {props.user.firstname} {props.user.lastname}{\" \"}\r\n        <i>\r\n          <small>{` [${props.user.username}]`}</small>\r\n        </i>\r\n      </span>\r\n    </div>\r\n\r\n    <div>\r\n      <div className=\"tittle\">\r\n        <span> Menu </span>\r\n      </div>\r\n      <nav>\r\n        <ul className=\"userMenu\">\r\n          <li className=\"linkHover\" onClick={props.editUsername}>\r\n            Edit Username\r\n          </li>\r\n          <li className=\"linkHover\" onClick={props.editPassword}>\r\n            Change Password\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nUserMenu.propTypes = {\r\n  user: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default UserMenu;\r\n","import React from \"react\";\r\nimport \"./UserList.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst UserList = (props) => (\r\n  <div>\r\n    <div className=\"tittle\">\r\n      <span style={{ width: \"90%\" }}> Users </span>\r\n      <div style={{ width: \"10%\" }}>\r\n        <span className=\"linkHover\" onClick={props.inviteUser}>+</span>\r\n      </div>\r\n    </div>\r\n    <nav>\r\n      <ul className=\"navUsers\">\r\n        {props.users.map((u, index) => (\r\n          <li className=\"linkHover\" key={index}>\r\n            {u.firstname} {u.lastname}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </nav>\r\n  </div>\r\n);\r\n\r\nUserList.propTypes = {\r\n  users: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default UserList;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport alertify from \"alertifyjs\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport \"./LeftSide.css\";\r\nimport { constants } from \"../../config/constants\";\r\nimport RoomList from \"../RoomList/RoomList\";\r\nimport UserMenu from \"../UserMenu/UserMenu\";\r\nimport UserList from \"../UserList/UserList\";\r\nimport {\r\n  setUsers,\r\n  editCurrentUser,\r\n  addNewRoom,\r\n  setChatRoom,\r\n  setMessages,\r\n  resetCountNewMessages,\r\n} from \"../../redux/actions/usersAction\";\r\n\r\nclass LeftSide extends Component {\r\n  currentChatRoom = (e) => {\r\n    const that = this.props;\r\n    if (that.chatRoom._id === e.target.id) \r\n      return;\r\n    axios\r\n      .get(`${constants.api}chatroom/select/${e.target.id}`)\r\n      .then((res) => {\r\n        that.setUsers(res.data.users);\r\n        that.setChatRoom({ _id: res.data._id, name: res.data.name });\r\n        that.setMessages(res.data.messages);\r\n        that.resetCountNewMessages(res.data._id);\r\n      })\r\n      .catch((err) => toast.error(err.response?.data));\r\n  };\r\n\r\n  editUsername = () => {\r\n    const that = this.props;\r\n    alertify\r\n      .prompt(\r\n        \"Chage Username\",\r\n        \"New Username:\",\r\n        that.user.username,\r\n        function (evt, username) {\r\n          axios\r\n            .patch(`${constants.api}user/edit/${that.user._id}`, { username })\r\n            .then((resp) => {\r\n              that.editCurrentUser(resp.data);\r\n              alertify.success(\"Username Updated\");\r\n            })\r\n            .catch((err) => alertify.error(err.response?.data));\r\n        },\r\n        () => {}\r\n      )\r\n      .set(\"type\", \"text\");\r\n  };\r\n\r\n  editPassword = () => {\r\n    const that = this.props;\r\n    alertify\r\n      .prompt(\r\n        \"Change Password\",\r\n        \"New Password:\",\r\n        \"\",\r\n        function (evt, password) {\r\n          axios\r\n            .patch(`${constants.api}user/edit/${that.user._id}`, { password })\r\n            .then((resp) => {\r\n              that.editCurrentUser(resp.data);\r\n              alertify.success(\"Password Updated\");\r\n            })\r\n            .catch((err) => alertify.error(err.response?.data));\r\n        },\r\n        () => {}\r\n      )\r\n      .set(\"type\", \"password\");\r\n  };\r\n\r\n  newChatRoom = () => {\r\n    const that = this.props;\r\n    alertify\r\n      .prompt(\r\n        \"New RoomChat\",\r\n        \"Name:\",\r\n        \"\",\r\n        function (evt, name) {\r\n          axios\r\n            .post(`${constants.api}chatroom/create`, {\r\n              name,\r\n              users: [that.user._id],\r\n            })\r\n            .then((res) => {\r\n              that.addNewRoom(res.data);\r\n              that.setUsers(res.data.users);\r\n              that.setChatRoom({ _id: res.data._id, name: name });\r\n              that.setMessages(res.data.messages);\r\n              alertify.success(\"Ok: \" + name);\r\n            })\r\n            .catch((err) => toast.error(err.response?.data));\r\n        },\r\n        (err) => toast.error(err)\r\n      )\r\n      .set(\"type\", \"text\");\r\n  };\r\n\r\n  redireccionar = () => this.props.history.push(\"/login\");\r\n\r\n  inviteUser = () => {\r\n    const that = this.props;\r\n    if (that.chatRoom._id === undefined) {\r\n      alertify.error(\"You have to select a chatroom first\");\r\n      return;\r\n    }\r\n\r\n    alertify\r\n      .confirm()\r\n      .setting({\r\n        message: `Are you want to generate a link for invite users to chatroom <em> ${that.chatRoom.name}?</em> `,\r\n        onok: function () {\r\n          const link = `${constants.client}invite/user/${that.user._id}/chatroom/${that.chatRoom._id}`;\r\n          navigator.clipboard.writeText(link);\r\n          alertify.success(\"link Copied, now Paste & Share it\");\r\n        },\r\n      })\r\n      .setHeader(\"<strong> Invite User to ChatRoom </strong> \")\r\n      .set(\"labels\", {\r\n        ok: \"Yes, Copy link to clipboard\",\r\n        cancel: \"No, Cancel\",\r\n      })\r\n      .show();\r\n  };\r\n  render() {\r\n    const { user, users, chatRooms, chatRoom } = this.props;\r\n    const tittle = \".:. ChatRoom App .:.\";\r\n    return (\r\n      <div className=\"left-menu-container\">\r\n        <UserMenu\r\n          user={user}\r\n          editUsername={this.editUsername}\r\n          editPassword={this.editPassword}\r\n        />\r\n        <RoomList\r\n          setChatRoom={this.newChatRoom}\r\n          chatRooms={chatRooms}\r\n          chatRoomId={this.props.chatRoom._id}\r\n          setCurrentChatRoom={this.currentChatRoom}\r\n        />\r\n        {this.props.chatRoom._id && (\r\n          <UserList inviteUser={this.inviteUser} users={users} />\r\n        )}\r\n        <Helmet>\r\n          <title>\r\n            {this.props.chatRoom._id\r\n              ? `chatRoom ${chatRoom.name} ${\r\n                  chatRoom.count ? \"(\" + this.props.count + \")\" : \"\"\r\n                }`\r\n              : `${tittle} ${chatRooms.reduce(\r\n                  (count, c) => count + (c.count ? c.count : 0),\r\n                  0\r\n                )} messages`}\r\n          </title>\r\n          <meta name=\"title\" content={chatRoom._id ? chatRoom.name : tittle} />\r\n        </Helmet>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    user: state.user,\r\n    users: state.users,\r\n    chatRooms: state.chatRooms,\r\n    chatRoom: state.chatRoom,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  addNewRoom,\r\n  setUsers,\r\n  setChatRoom,\r\n  setMessages,\r\n  editCurrentUser,\r\n  resetCountNewMessages,\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LeftSide);\r\n","import store from \"../redux/store\";\r\nimport io from \"socket.io-client\";\r\nimport { addNewMessage, setCountNewMessages } from '../redux/actions/usersAction';\r\nimport { constants } from \"../config/constants\";\r\n\r\nexport let socket = null;\r\n\r\nexport const initSocket = () => {\r\n  const newMessageAudio = new Audio(constants.newMessageSound);\r\n  let newState = store.getState();\r\n  socket = io(constants.IP_Server);\r\n  \r\n  socket.on(\"login\", (data) => {\r\n    console.log(\"WELCOME to SOCKET.IO \", data.id);\r\n    newState.chatRooms.map(x =>\r\n      socket.emit('enter to room', {\r\n        username: newState.user.username, \r\n        chatroom: x._id})\r\n    );\r\n  });\r\n\r\n  socket.on(\"new message\", (message) => {\r\n    console.log(\"new message\");\r\n    newState = store.getState();\r\n    if(newState.chatRoom._id === undefined ||  newState.chatRoom._id !== message.chatroom_id){\r\n      store.dispatch(setCountNewMessages(message.chatroom_id));\r\n    }\r\n    else {\r\n      receivedMessage(message);\r\n      newMessageAudio.play();\r\n    }\r\n  });\r\n\r\n  socket.on(\"reconnect\", () => {\r\n    console.log(\"you have been reconnected\");\r\n  });\r\n\r\n  socket.on(\"reconnect_error\", () => {\r\n    console.log(\"attempt to reconnect has failed\");\r\n  });\r\n\r\n  socket.on(\"disconnect\", () => {\r\n    console.log('disconnect')\r\n  })\r\n\r\n\r\n  const receivedMessage = (msg) => {\r\n    store.dispatch(addNewMessage(msg));\r\n  };\r\n\r\n  return socket;\r\n};\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { connect } from \"react-redux\";\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\nimport \"./main.css\";\r\nimport { constants } from \"../../config/constants\";\r\nimport { addNewMessage, logOut } from \"../../redux/actions/usersAction\";\r\nimport { removeUserSession } from \"../../helpers/userSessionInfo\";\r\nimport Header from \"../Header/Header\";\r\nimport MessageArea from \"../MessageArea/MessageArea\";\r\nimport WelcomeMessage from \"../MessageArea/WelcomeMessage/WelcomeMessage\";\r\nimport LeftSide from \"../LeftSide/LeftSide\";\r\nimport { socket } from \"../../helpers/sockets\";\r\n\r\nclass Main extends Component {\r\n  sendMessage = (message) => {\r\n    if (message === \"\" || message === \"\\n\" || !socket.connected) \r\n      return;\r\n\r\n    const msg = {\r\n      message,\r\n      user_id: this.props.user._id,\r\n      chatroom_id: this.props.chatRoom._id,\r\n    };\r\n\r\n    axios\r\n      .post(`${constants.api}chatroom/message/create`, msg)\r\n      .then((res) => {\r\n        msg.user_id = this.props.user;\r\n        this.props.addNewMessage({ ...res.data });\r\n        socket.emit(\"new message\", { ...res.data });\r\n      })\r\n      .catch((err) => toast.error(err.response?.data));\r\n  };\r\n\r\n  logOut = () => {\r\n    socket.emit(\"disconnection\");\r\n    removeUserSession();\r\n    this.props.logOut();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"dashboard\">\r\n        <LeftSide />\r\n        <div className=\"messages-area\">\r\n          <Header\r\n            chatRoom_name={this.props.chatRoom.name}\r\n            logOut={this.logOut}\r\n          />\r\n          {!this.props.chatRoom._id && (\r\n            <WelcomeMessage WithchatRooms={this.props.chatRooms.length === 0} />\r\n          )}\r\n          {this.props.chatRoom._id && (\r\n            <MessageArea\r\n              messages={this.props.messages}\r\n              onKeyPress={this.sendMessage}\r\n            />\r\n          )}\r\n          <ToastContainer autoClose={2000} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    chatRoom: state.chatRoom,\r\n    user: state.user,\r\n    chatRooms: state.chatRooms,\r\n    messages: state.messages,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  addNewMessage,\r\n  logOut,\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect, Link } from \"react-router-dom\";\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./LoginRegister.css\";\r\nimport { setCurrentUser } from \"../../redux/actions/usersAction\";\r\nimport { constants } from \"../../config/constants\";\r\nimport { addUserSession } from \"../../helpers/userSessionInfo\";\r\nimport { initSocket } from \"../../helpers/sockets\";\r\n\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      username: null,\r\n      password: null,\r\n    };\r\n  }\r\n\r\n  addUserTochatRoom = (userid) =>\r\n    axios.get(\r\n      `${constants.api}invite/user/${userid}/chatroom/${this.props.match.params.roomid}`\r\n    );\r\n\r\n  // Bindea los inputs con el estado\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      [event.target.id]: event.target.value,\r\n    });\r\n  };\r\n\r\n  // Hace el Submit del Form\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    axios\r\n      .post(`${constants.api}auth/login`, this.state)\r\n      .then((response) => {\r\n        let { chatRooms, ...other } = response.data.user;\r\n        addUserSession(response.data.token);\r\n        if (\r\n          this.props.match.params?.iduser ||\r\n          this.props.match.params?.roomid\r\n        ) {\r\n          this.addUserTochatRoom(other._id)\r\n            .then((res) => {\r\n              toast.success(\"User added to chatroom\");\r\n              chatRooms.push(res.data);\r\n              this.props.setCurrentUser({\r\n                token: response.data.token,\r\n                chatRooms,\r\n                user: other,\r\n              });\r\n              initSocket();\r\n              toast.success(\"User Logged Succesfuly\");\r\n              return this.props.history.push(\"/\");\r\n            })\r\n            .catch(() => {});\r\n        } else {\r\n          this.props.setCurrentUser({\r\n            token: response.data.token,\r\n            chatRooms,\r\n            user: other,\r\n          });\r\n          initSocket();\r\n          toast.success(\"User Logged Succesfuly\");\r\n          return this.props.history.push(\"/\");\r\n        }\r\n      })\r\n      .catch((err) => toast.error(err.response?.data));\r\n  };\r\n\r\n  render() {\r\n    if (this.props.isAuth === true) {\r\n      return <Redirect to=\"/\" />;\r\n    }\r\n\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <form onSubmit={this.handleSubmit}>\r\n          <div className=\"form-tittle\">Log In</div>\r\n          <div className=\"form-row\">\r\n            <label htmlFor=\"username\"> User name </label>\r\n            <input\r\n              autoFocus\r\n              type=\"text\"\r\n              value={this.state.username}\r\n              onChange={this.handleChange}\r\n              required\r\n              id=\"username\"\r\n              name=\"username\"\r\n              placeholder=\"username\"\r\n              maxLength=\"20\"\r\n            />\r\n          </div>\r\n          <div className=\"form-row\">\r\n            <label htmlFor=\"password\"> Password </label>\r\n            <input\r\n              value={this.state.password}\r\n              onChange={this.handleChange}\r\n              type=\"password\"\r\n              required\r\n              name=\"password\"\r\n              id=\"password\"\r\n              maxLength=\"20\"\r\n            />\r\n          </div>\r\n          <div className=\"form-row\">\r\n            <button className=\"linkHover\" type=\"submit\">\r\n              Login\r\n            </button>\r\n          </div>\r\n        </form>\r\n        <div className=\"center\">\r\n          <label> Do you don't have an account? </label>\r\n          <Link className=\"out_link linkHover\" to=\"/register\">\r\n            Sign Up\r\n          </Link>\r\n        </div>\r\n        <ToastContainer autoClose={2000} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isAuth: state.isAuth,\r\n  };\r\n};\r\nconst mapDispatchToProps = {\r\n  setCurrentUser,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../Login/LoginRegister.css\";\r\nimport { constants } from \"../../config/constants\";\r\n\r\nclass Register extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      username: \"\",\r\n      firstname: \"\",\r\n      lastname: \"\",\r\n      password: \"\",\r\n    };\r\n  }\r\n\r\n  // Bindea los inputs con el estado\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      [event.target.id]: event.target.value,\r\n    });\r\n  };\r\n\r\n  // Hace el Submit del Form\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    axios\r\n      .post(`${constants.api}user/create`, this.state)\r\n      .then(() => {\r\n        toast.success(\"User Created Succesfuly\");\r\n        this.props.history.push(\"/login\");\r\n      })\r\n      .catch((err) => toast.error(err.response?.data));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <form onSubmit={this.handleSubmit}>\r\n          <div className=\"form-tittle\">Sign Up</div>\r\n          <div className=\"form-row\">\r\n            <label htmlFor=\"name\"> User name </label>\r\n            <input\r\n              autoFocus\r\n              type=\"text\"\r\n              value={this.state.username}\r\n              onChange={this.handleChange}\r\n              required\r\n              id=\"username\"\r\n              name=\"username\"\r\n              maxLength=\"20\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-row\">\r\n            <label htmlFor=\"firstname\"> First name </label>\r\n            <input\r\n              autoFocus\r\n              type=\"text\"\r\n              value={this.state.firstname}\r\n              onChange={this.handleChange}\r\n              required\r\n              id=\"firstname\"\r\n              name=\"firstname\"\r\n              maxLength=\"20\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-row\">\r\n            <label htmlFor=\"lastname\"> \r\n              Last name \r\n            </label>\r\n            <input\r\n              autoFocus\r\n              type=\"text\"\r\n              value={this.state.lastname}\r\n              onChange={this.handleChange}\r\n              required\r\n              id=\"lastname\"\r\n              name=\"lastname\"\r\n              maxLength=\"20\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-row\">\r\n            <label htmlFor=\"password\"> Password </label>\r\n            <input\r\n              value={this.state.password}\r\n              onChange={this.handleChange}\r\n              type=\"password\"\r\n              required\r\n              name=\"password\"\r\n              id=\"password\"\r\n              maxLength=\"20\"\r\n            />\r\n          </div>\r\n          <div className=\"form-row\">\r\n            <button className=\"linkHover\" type=\"submit\">\r\n              Sign Up\r\n            </button>\r\n          </div>\r\n        </form>\r\n        <div>\r\n          <label> \r\n            Do you already have an account? \r\n          </label>\r\n          <Link className=\"out_link linkHover\" to=\"/login\">\r\n            Log In\r\n          </Link>\r\n        </div>\r\n        <ToastContainer autoClose={2000} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Register;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { constants } from \"../../config/constants\";\r\nimport { addUserSession, getJwt } from \"../../helpers/userSessionInfo\";\r\nimport { addNewRoom } from \"../../redux/actions/usersAction\";\r\n\r\nclass InviteUser extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      user: {},\r\n      isLoading: false,\r\n      chatRoom: {},\r\n      token: null,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.setState({ isLoading: true, userAdded: false, token: getJwt() });\r\n    axios\r\n      .get(\r\n        `${constants.api}user/invite/${this.props.match.params.iduser}/chatroom/${this.props.match.params.roomid}`\r\n      )\r\n      .then((res) => {\r\n        if (this.state.token !== null) {\r\n          addUserSession(this.state.token);\r\n        }\r\n        this.setState({\r\n          user: res.data,\r\n          isLoading: false,\r\n          chatRoom: res.data.chatRooms[0],\r\n        });\r\n      })\r\n      .catch(() => {});\r\n  }\r\n\r\n  addUserTochatRoom = () => {\r\n    this.setState({ isLoading: true, userAdded: false });\r\n    var decoded = jwt_decode(this.state.token);\r\n    axios\r\n      .get(\r\n        `${constants.api}invite/user/${decoded._id}/chatroom/${this.props.match.params.roomid}`\r\n      )\r\n      .then((res) => {\r\n        toast.success(\"User Added Succesfuly\");\r\n        this.props.addNewRoom(res.data);\r\n        this.setState({ isLoading: false, userAdded: true });\r\n      })\r\n      .catch(() => {});\r\n  };\r\n  render() {\r\n    const { user, isLoading, chatRoom, userAdded, token } = this.state;\r\n    if (isLoading) {\r\n      return <p>Loading ...</p>;\r\n    }\r\n\r\n    if (userAdded) {\r\n      return (\r\n        <div className=\"wrapper\">\r\n          <div className=\"form-tittle\">ChatRoom App Invitation </div>\r\n          You have been added succesfuly\r\n          <Link className=\"out_link linkHover\" to=\"/\">\r\n            Go to ChatRoomApp\r\n          </Link>\r\n          <ToastContainer autoClose={2000} />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <div className=\"form-tittle\">ChatRoom App Invitation </div>\r\n        Hello, You have a pending request from the user\r\n        <div className=\"datosUser\">\r\n          <img\r\n            src={`${constants.IP_Server}/avatars/${user.avatar}`}\r\n            alt=\"\"\r\n            className=\"photo\"\r\n          />\r\n          <span className=\"text-capitalize\">\r\n            {user.firstname} {user.lastname}\r\n            <i>{` (${user.username})`}</i>\r\n          </span>\r\n        </div>\r\n        <br />\r\n        Do you want to be added to the chat room\r\n        <div className=\"text-capitalize\">{chatRoom.name}</div>\r\n        {token == null && (\r\n          <div>\r\n            <h4>\r\n              NOTE: You need to login first, Would you like be redirected to\r\n              login page and set a session?\r\n            </h4>\r\n          </div>\r\n        )}\r\n        <br />\r\n        <div className=\"divOkCancel\">\r\n          {token == null ? (\r\n            <Link\r\n              className=\"out_link linkHover\"\r\n              to={`/login/invite/user/${this.props.match.params.iduser}/chatroom/${this.props.match.params.roomid}`}\r\n            >\r\n              Ok\r\n            </Link>\r\n          ) : (\r\n            <button\r\n              className=\"linkHover\"\r\n              style={{ width: \"100px\", opacity: \"0.5\", margin: \"10px\" }}\r\n              onClick={this.addUserTochatRoom}\r\n            >\r\n              Ok\r\n            </button>\r\n          )}\r\n        </div>\r\n        <ToastContainer autoClose={2000} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  addNewRoom,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(InviteUser);\r\n","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nconst PrivateRoute = ({ component: Component, isAuth, ...rest }) => (\r\n    <Route {...rest} render={props =>\r\n        isAuth === true ?\r\n            <Component {...props} />\r\n            :\r\n            <Redirect to=\"/login\" /> }\r\n    />\r\n);\r\n\r\nconst mapStateToProps = state => (\r\n{\r\n    isAuth: state.isAuth\r\n});\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { Switch, Route, BrowserRouter } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./App.css\";\r\nimport store from \"./redux/store\";\r\nimport Main from \"./components/Main/Main\";\r\nimport Login from \"./components/Login/Login\";\r\nimport Register from \"./components/Register/Register\";\r\nimport InviteUser from \"./components/InviteUser/InviteUser\";\r\nimport PrivateRoute from \"./PrivateRoute\";\r\nimport {\r\n  addUserSession,\r\n  getJwt,\r\n  removeUserSession,\r\n} from \"./helpers/userSessionInfo\";\r\nimport { setCurrentUser, setUserToken } from \"./redux/actions/usersAction\";\r\nimport { constants } from \"./config/constants\";\r\nimport { initSocket, socket } from \"./helpers/sockets\";\r\nconst token = getJwt();\r\n\r\nif (token) {\r\n  try {\r\n    const decoded = jwt_decode(token);\r\n    addUserSession(token);\r\n    store.dispatch(setUserToken(decoded));\r\n    axios\r\n      .post(`${constants.api}auth/token`, decoded)\r\n      .then((response) => {\r\n        const { chatRooms, ...other } = response.data.user;\r\n        store.dispatch(\r\n          setCurrentUser({\r\n            token,\r\n            chatRooms,\r\n            user: other,\r\n          })\r\n        );\r\n        if (!socket) \r\n          initSocket();\r\n      })\r\n      .catch((err) => {\r\n        toast.error(err.response?.data);\r\n      });\r\n  } catch(err) {\r\n    removeUserSession();\r\n    toast.error(err.message);\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <PrivateRoute\r\n            exact\r\n            path=\"/\"\r\n            isAuth={this.props.isAuth}\r\n            component={Main}\r\n          />\r\n          <Route exact path=\"/login\" component={Login} />\r\n          <Route\r\n            exact\r\n            path=\"/login/invite/user/:iduser/chatroom/:roomid\"\r\n            component={Login}\r\n          />\r\n          <Route exact path=\"/register\" component={Register} />\r\n          <Route\r\n            path=\"/invite/user/:iduser/chatroom/:roomid\"\r\n            component={InviteUser}\r\n          />\r\n        </Switch>\r\n        <ToastContainer autoClose={2000} />\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isAuth: state.isAuth,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  setCurrentUser,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport store from \"./redux/store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}